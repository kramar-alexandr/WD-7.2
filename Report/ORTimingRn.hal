external function Time TimeDiff(Time,Time);
external function roundmode SetRoundModeD(Integer);

SetLangMode(LangRussian,"RUS",0);


function integer calcMinutesBetween(date d1,date d2,time t1,time t2)
begin
  integer res;
  date regdate;
  time diftime,regtime;

  
  regdate = d1;
  regtime = t1;
  res = 0;
  
lNextDay:;
  if(regdate<d2)then begin
    if(regtime>=stringtotime("9:00") and regtime<=stringtotime("21:00"))then begin
      diftime = timediff(regtime,stringtotime("21:00"));
      res = res + diftime.hour*60+diftime.minute;
      regtime = stringtotime("9:00");
      regdate = addday(regdate,1);
      goto lNextDay;
    end;
    
    if(regtime>=stringtotime("21:00"))then begin
      regtime = stringtotime("9:00");
      regdate = addday(regdate,1);
      goto lNextDay;
    end; 
  end else begin
    if(regtime<stringtotime("9:00"))then begin
      regtime = stringtotime("9:00");
    end;
    diftime = timediff(regtime,t2);
    res = res + diftime.hour*60+diftime.minute;
  end;
  
  calcMinutesBetween = res;
return;
end;


global procedure ORTimingRn(record RcVc RepSpec)
begin
  record ORVc ORr;
  boolean TrHs,testf;
  integer minutes;
  val hrs;
  vector val mantime,mancount,sobrtime,sobrcount,vidaltime,vidalcount;
  array string 30 amanager;
  integer i;
  
  
  startreportnoheaderjob("Час обробки замовлень");
  
  
  startformat(15);
    outstring(0,0,"Рахунок",false);
    outstring(30,0,"Менеджер",false);
    outstring(100,0,"Дата рахунку",false);
    outstring(150,0,"Час рахунку",false);
    outstring(200,0,"Дата в роботі",false);
    outstring(250,0,"Час в роботі",false);
    outstring(300,0,"Хвилин (9-21)",false);  
    outstring(390,0,"Готовність (год)",false);
    //outstring(360,0,"Хвилин (9:00-21:00)",false);
    //outstring(380,0,"Зібрав",false);
    outstring(1,0,"Видача(год)",true);
    //outstring(370,0,"Хвилин (9:00-21:00)",false);  
    //outstring(440,0,"Видав",false);  
  endformat;
  
  ORr.OrdDate = RepSpec.sStartDate;
  TrHs = true;
  while(loopkey("OrdDate",ORr,1,TrHs))begin
    testf = true;
    if(ORr.OrdDate>RepSpec.sEndDate)then begin TrHs = false; testf = false; end;
    if(blankdate(ORr.InWorkDate))then begin testf = false; end;
    if(left(ORr.CustOrdNr,1)=="M")then begin testf = false; end;
    
    
    if(testf)then begin
      
      startformat(15);
        outstring(0,"DblORVc",ORr.SerNr,false);
        outstring(30,0,ORr.InWorkMan,false);
        outstring(100,0,ORr.RegDate,false);
        outstring(150,0,ORr.RegTime,false);
        outstring(200,0,ORr.InWorkDate,false);
        outstring(250,0,ORr.InWorkTime,false);
        
        
        
        minutes = calcMinutesBetween(ORr.RegDate,ORr.InWorkDate,ORr.RegTime,ORr.InWorkTime);
        
        mantime[ORr.InWorkMan] = mantime[ORr.InWorkMan] + minutes;
        mancount[ORr.InWorkMan] = mancount[ORr.InWorkMan] + 1;
        outstring(300,0,minutes,false);  
        
        if(nonblanktime(ORr.ReadyToSentTime))then begin
          hrs = calcMinutesBetween(ORr.InWorkDate,ORr.ReadyToSentDate,ORr.InWorkTime,ORr.ReadyToSentTime);
          //outstring(300,0,ORr.ReadyToSentTime,false); 
          outstring(340,0,ORr.ReadyToSentMan,false); 
          outstring(390,0,hrs/60,false);  
          sobrtime[ORr.ReadyToSentMan] = sobrtime[ORr.ReadyToSentMan] + hrs/60;
          sobrcount[ORr.ReadyToSentMan] = sobrcount[ORr.ReadyToSentMan]+1;
        end else begin
          //outstring(300,0,"",false);
          outstring(370,0,"",false);
        end;
        
        if(nonblanktime(ORr.DoneTime))then begin
          hrs = calcMinutesBetween(ORr.ReadyToSentDate,ORr.DoneDate,ORr.ReadyToSentTime,ORr.DoneTime);
          outstring(420,0,ORr.DoneMan,false); 
          outstring(1,0,hrs/60,true);  
          vidaltime[ORr.ReadyToSentMan] = vidaltime[ORr.ReadyToSentMan] + hrs/60;
          vidalcount[ORr.ReadyToSentMan] = vidalcount[ORr.ReadyToSentMan]+1;
        end else begin
          //outstring(380,0,"",false);
          outstring(1,0,"",true);
        end;
        
      endformat;
      gray_divider(0,1);
      
    end;
  end;
  
  gray_divider(0,1);
  startformat(15);
    outstring(0,0,"Середній час обробки замовлень",false);  
  endformat;
  
  getvectortags(mancount,amanager);
  
  startformat(15);
    outstring(0,0,"Менеджер",false);  
    outstring(100,0,"Замовлень",false);  
    outstring(100,0,"Час",false);  
  endformat;
  for(i=0;i<amanager.length;i=i+1)begin
    startformat(15);
      outstring(0,0,amanager[i],false);  
      outstring(100,0,mancount[amanager[i]],false);  
      outstring(100,0,round(mantime[amanager[i]]/mancount[amanager[i]],SetRoundModeD(0)),false);  
    endformat;
  end;
  
  gray_divider(0,1);
  startformat(15);
    outstring(0,0,"Середній час підготовки замовлень",false);  
  endformat;
  
  getvectortags(sobrcount,amanager);
  
  startformat(15);
    outstring(0,0,"Менеджер",false);  
    outstring(100,0,"Замовлень",false);  
    outstring(100,0,"Час",false);  
  endformat;
  for(i=0;i<amanager.length;i=i+1)begin
    startformat(15);
      outstring(0,0,amanager[i],false);  
      outstring(100,0,sobrcount[amanager[i]],false);  
      outstring(100,0,round(sobrtime[amanager[i]]/sobrcount[amanager[i]],SetRoundModeD(1)),false);  
    endformat;
  end;
  
  gray_divider(0,1);
  startformat(15);
    outstring(0,0,"Середній час видачі замовлень",false);  
  endformat;
  
  getvectortags(vidalcount,amanager);
  
  startformat(15);
    outstring(0,0,"Менеджер",false);  
    outstring(100,0,"Замовлень",false);  
    outstring(100,0,"Час",false);  
  endformat;
  for(i=0;i<amanager.length;i=i+1)begin
    startformat(15);
      outstring(0,0,amanager[i],false);  
      outstring(100,0,vidalcount[amanager[i]],false);  
      outstring(100,0,round(vidaltime[amanager[i]]/vidalcount[amanager[i]],SetRoundModeD(1)),false);  
    endformat;
  end;
  
  
  
  endjob;

return;
end;


global webpublic updating procedure WebSetCorrectDateTorOR()
begin
  record ORVc ORr;
  boolean TrHs,TrHs2;
  record RHistVc RHr;
  string 100 tstr;
  
  setcompany(13,false);
  
  ORr.OrdDate = currentdate;
  TrHs = true;
  while(loopbackkey("OrdDate",ORr,1,TrHs))begin
    logtext(0,ORr.OrdDate);
    if(ORr.OrdDate>stringtodate("18/02/2023"))then begin
      resetloop(RHr);
      tstr = BuildRecordIdStr(ORr,currentcompany);
      TrHs2 = true;
      RHr.RecidStr = tstr;
      while(loopbackkey("RecidStr",RHr,1,TrHs2))begin
        if(RHr.RecidStr!=tstr)then begin TrHs2 = false; end;
        
        if(TrHs2)then begin
          if(RHr.accode==kRecordHistoryActionCreated)then begin
            ORr.RegDate = RHr.TransDate;
            ORr.RegTime = RHr.TransTime;
            recordstore(ORr,true);
            TrHs2 = false;
          end;
        end;
      end;
    end else begin
      TrHs = false;
    end;
  end;

return;
end;