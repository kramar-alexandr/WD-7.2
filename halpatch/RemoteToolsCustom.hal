external updating procedure RecalcORShops(string); //Edit***************************Sasha2,17:05 31.10.2014external procedure CalcEANCHS(var string); //Edit***************************Sasha2,17:05 31.10.2014 globalprocedure BarcodeIncrement(var string barcode,Integer increment)begin  integer lenght,i,lastindex,leftover,base,incr;  array integer digit;  boolean testf;        testf = true;    lenght = len(barcode);    incr = increment;    for (i=0;i<lenght;i=i+1) begin      digit[i] = StringToInt(mid(barcode,i,1));      lastindex = i;    end;    digit[lastindex] = digit[lastindex] + incr;    while (digit[lastindex]>9 and testf) begin      leftover = Mod(digit[lastindex],10);      base = digit[lastindex] - leftover;      if (base>0) then begin        digit[lastindex] = leftover;        incr = base/10;        lastindex = lastindex - 1;        digit[lastindex] = digit[lastindex] + incr;      end;      if (lastindex==0 and digit[lastindex]>9) then begin        testf = false;      end;    end;    barcode = "";    if (testf) then begin      for (i=0;i<lenght;i=i+1) begin        barcode = barcode & digit[i];      end;    end;   return; end;global  //Edit***************************Sasha2,12:00 22.01.2015 {updating procedure HandleSetEAN13PU(var record PUVc PUr)begin  row PUVc PUrw;  record INVc INr,IN2r;  integer mrcnt,i;  string 40 barcode,tempean;  boolean TrHs,testf;      mrcnt = MatRowCnt(PUr);    for (i=0;i<mrcnt;i=i+1) begin      MatRowGet(PUr,i,PUrw);      if (NonBlank(PUrw.ArtCode) and blank(PUrw.AlternativeCode)) then begin        INr.Code = PUrw.ArtCode;        if (ReadFirstMain(INr,1,true)) then begin          if (NonBlank(INr.BarCode)) then begin            PUrw.AlternativeCode = INr.BarCode;            MatRowPut(PUr,i,PUrw);          end else begin            IN2r.BarCode = "2";            TrHs = true;            testf = true;            if (blank(tempean)) then begin              while (LoopKey("BarCode",IN2r,1,TrHs)) begin                if (left(IN2r.BarCode,1)!="2") then begin TrHs = false; end;                if (Len(IN2r.BarCode)==13) then begin testf = false; end;                if (Len(IN2r.BarCode)!=13 and testf==false) then begin TrHs = false; end;                if (TrHs) then begin                  tempean = IN2r.BarCode;                end;              end; RESETLOOP(IN2r);            end;            if (tempean=="2999999999991") then begin              goto LHandleSetEAN13PU;            end;            if (blank(tempean) or left(tempean,1)!="2" or len(tempean)!=13) then begin              barcode = "199999999999";            end else begin              barcode = mid(tempean,0,12);            end;            BarcodeIncrement(barcode,1);            if (NonBlank(barcode)) then begin               CalcEANCHS(barcode);              INr.BarCode = barcode;              tempean = barcode;              RECORDSTORE(INr,true);              PUrw.AlternativeCode = barcode;              MatRowPut(PUr,i,PUrw);            end;          end;        end;      end;    end;    LHandleSetEAN13PU:;      return;end; //Edit***************************Sasha2,12:01 22.01.2015 }globalupdating procedure CopyFrINToMyLabelItemMn(record RcVc RepSpec)BEGIN  boolean TrHs,testf;  record INvc INr;  row INvc INrw;  record MyLabelItemVc MLIr;  row MyLabelItemVc MLIrw;  integer rwcnt,i;  string 30 item;  TrHs = true;  INr.Code = "";  while (LoopMain(INr,1,TrHs)) begin  	testf = true;  	MLIr.ArtCode = INr.Code;  	if (!ReadFirstMain(MLIr,1,true)) then begin testf = false; end;  	if (nonblank(item) and INr.Code==item) then begin testf = false; end;  	if (testf) then begin  		item = INr.Code;  		INr.LPriceList = MLIr.PriceList;  		INr.LName = MLIr.Name;  		INr.LDefFormCode = MLIr.DefFormCode;  		INr.LComment = MLIr.Comment;  		INr.LCurncyCode = MLIr.CurncyCode;  		INr.LSize = MLIr.Size;  		INr.LCust1 = MLIr.Cust1;  		INr.LCust2 = MLIr.Cust2;  		INr.LCust3 = MLIr.Cust3;  		INr.LCust4 = MLIr.Cust4;  		INr.LCust5 = MLIr.Cust5;  		INr.LCustInt1 = MLIr.CustInt1;  		INr.LCustInt2 = MLIr.CustInt2;  		INr.LCustInt3 = MLIr.CustInt3;  		INr.LCustInt4 = MLIr.CustInt4;  		INr.LCustInt5 = MLIr.CustInt5;  		rwcnt = MatRowCnt(MLIr);  		for (i=0;i<rwcnt;i=i+1) begin  			MatRowGet(MLIr,i,MLIrw);  			INrw.LParam = MLIrw.Param;  			INrw.LName = MLIrw.Name;  			INrw.LComment1 = MLIrw.Comment1;  			INrw.LComment2 = MLIrw.Comment2;  			INrw.LComment3 = MLIrw.Comment3;  			INrw.LComment4 = MLIrw.Comment4;  			INrw.LComment5 = MLIrw.Comment5;  			INrw.LComment6 = MLIrw.Comment6;  			INrw.LComment7 = MLIrw.Comment7;  			INrw.LComment8 = MLIrw.Comment8;  			INrw.LArInt1 = MLIrw.ArInt1;  			INrw.LArInt2 = MLIrw.ArInt2;  			INrw.LArInt3 = MLIrw.ArInt3;  			INrw.LArInt4 = MLIrw.ArInt4;  			MatRowPut(INr,i,INrw);  		end;  		if (RECORDSTORE(INr,true)) then begin  		end;  	end;  end;  RETURN;END;globalupdating procedure ClearINPLMn(record RcVc RepSpec)BEGIN  record INVc INr;  record PLVc PLr;  record ItemStatusVc ISr;    while(loopmain(INr,1,true))begin  	if(INr.LastPriceChange<stringtodate("01/01/2014"))then begin			ISr.Code = INr.Code;			if(readfirstmain(ISr,1,true)==false)then begin				recorddelete(INr);				stepback(INr);			end;  	end;  end;    while(loopmain(PLr,1,true))begin  	INr.Code = PLr.ArtCode;  	if(readfirstmain(INr,1,true)==false)then begin  		recorddelete(PLr);  		stepback(PLr);  	end;  end;    RETURN;END;global //Edit***************************Sasha2,13:02 04.11.2014 {updating procedure RecalcShopsItemsMn(record RcVc RepSpec)BEGIN  record StockMovVc StockMovr;  row StockMovVc StockMovrw;  	  	RecalcORShops("");    RETURN;END; //Edit***************************Sasha2,13:02 04.11.2014 }global //Edit***************************Sasha2,12:34 25.03.2015 {function Boolean OverFlowStock_SerialNrAvail(string item,string ser)BEGIN  record SerBalVc SBr;  Boolean res,TrHs;  Integer qty;    qty = 0;  RESETLOOP(SBr);  SBr.Item = item;  SBr.Serial = ser;  TrHs = true;  while (LoopKey("ItemSerial",SBr,2,TrHs)) begin    if (SBr.Item!=item or SBr.Serial!=ser) then begin TrHs = false; end;    if (TrHs) then begin      qty = qty + SBr.Quant;    end;  end;  if (qty>0) then begin     res = true;   end;  OverFlowStock_SerialNrAvail = res;  RETURN;END; //Edit***************************Sasha2,12:34 25.03.2015 }global updating procedure INChangeSizeMn()begin	record INVc INr;		while(loopmain(INr,1,true))begin		INr.LSize = 3;		INr.LPriceList = "";		recordstore(INr,true);	end;	return;end;